{"version":3,"sources":["features/events/lib/Bell.module.css","features/events/Controls.module.css","features/events/Notifications.module.css","features/events/slice.ts","features/events/Controls.tsx","app/hooks.ts","features/events/lib/timeMessage.ts","features/events/lib/Bell.tsx","features/events/Notifications.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","eventsSlice","createSlice","name","initialState","events","readCount","popoverOpen","reducers","addEvent","state","action","unshift","payload","timestamp","Date","now","deleteEvents","markEventsRead","length","loadRandomSentence","randomSentence","words","togglePopover","actions","selectEvents","selectReadCount","showPopoverOpen","Controls","connect","connector","props","interval","submitEvent","eventName","setState","handleTogglePopoverClick","handleInputChange","e","target","value","handleEnterPress","key","handleDeleteEventsClick","handleMarkEventsReadClick","this","setInterval","autoEventIntervalMills","clearInterval","className","styles","wrapper","row","textbox","onChange","onKeyPress","placeholder","button","button__small","onClick","React","Component","useAppDispatch","useDispatch","useAppSelector","useSelector","MINUTE","HOUR","DAY","MONTH","timeMessage","fromTimestampMillis","currentTimestampMillis","differenceMillis","Math","floor","Bell","read","unreadCount","dispatch","src","alt","icon","number","Notifications","popoverEventsCount","showModal","slice","map","evt","i","item","time","getMilliseconds","link","App","store","configureStore","reducer","eventsReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0cfc2c83.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Bell_wrapper__-tasY\",\"icon\":\"Bell_icon__1zYLu\",\"number\":\"Bell_number__IAy9c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Controls_row__2Q9VR\",\"wrapper\":\"Controls_wrapper__1jW7z\",\"value\":\"Controls_value__1IBz_\",\"button\":\"Controls_button__1GjiO\",\"button__small\":\"Controls_button__small__1AOcu\",\"textbox\":\"Controls_textbox__2eUo0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Notifications_row__2LMP4\",\"name\":\"Notifications_name__2RNhD\",\"item\":\"Notifications_item__3fOb_\",\"time\":\"Notifications_time__1qWu2\",\"link\":\"Notifications_link__1286Q\"};","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\n// @ts-ignore\nimport * as randomSentence from \"random-sentence\";\n\nexport type Event = {\n  name: string;\n  timestamp: number; // Date.now() format\n};\n\nexport type EventsState = {\n  events: Event[];\n  readCount: number;\n  popoverOpen: boolean;\n};\n\nconst initialState: EventsState = {\n  events: [],\n  readCount: 0,\n  popoverOpen: false,\n};\n\nconst AUTO_EVENT_WORDS_COUNT = 5;\n\nexport const eventsSlice = createSlice({\n  name: \"events\",\n  initialState,\n  reducers: {\n    addEvent: (state, action: PayloadAction<string>) => {\n      state.events.unshift({ name: action.payload, timestamp: Date.now() });\n    },\n    deleteEvents: (state) => {\n      state.events = [];\n      state.readCount = 0;\n    },\n    markEventsRead: (state) => {\n      state.readCount = state.events.length;\n    },\n    loadRandomSentence: (state) => {\n      state.events.unshift({\n        name: randomSentence({ words: AUTO_EVENT_WORDS_COUNT }),\n        timestamp: Date.now(),\n      });\n    },\n    togglePopover: (state) => {\n      state.popoverOpen = !state.popoverOpen;\n    },\n  },\n});\n\nexport const {\n  addEvent,\n  deleteEvents,\n  markEventsRead,\n  loadRandomSentence,\n  togglePopover,\n} = eventsSlice.actions;\n\nexport const selectEvents = (state: RootState) => state.events.events;\n\nexport const selectReadCount = (state: RootState) => state.events.readCount;\n\nexport const showPopoverOpen = (state: RootState) => state.events.popoverOpen;\n\nexport default eventsSlice.reducer;\n","import React from \"react\";\nimport {\n  addEvent,\n  deleteEvents,\n  markEventsRead,\n  loadRandomSentence,\n  togglePopover,\n} from \"./slice\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport styles from \"./Controls.module.css\";\n\nconst connector = connect(null, {\n  addEvent,\n  deleteEvents,\n  markEventsRead,\n  loadRandomSentence,\n  togglePopover,\n});\n\nexport type ControlsComponentProps = ConnectedProps<typeof connector> & {\n  autoEventIntervalMills: number;\n};\ntype ControlsComponentState = { eventName: string };\n\nclass ControlsComponent extends React.Component<\n  ControlsComponentProps,\n  ControlsComponentState\n> {\n  private interval: NodeJS.Timeout | null;\n\n  constructor(props: ControlsComponentProps) {\n    super(props);\n    this.state = {\n      eventName: \"\",\n    };\n    this.interval = null;\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(\n      () => this.props.loadRandomSentence(),\n      this.props.autoEventIntervalMills\n    );\n  }\n\n  componentWillUnmount() {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n\n  submitEvent = () => {\n    if (this.state.eventName.length) {\n      this.props.addEvent(this.state.eventName);\n      this.setState({ eventName: \"\" });\n    }\n  };\n\n  handleTogglePopoverClick = () => {\n    this.props.togglePopover();\n  };\n\n  handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ eventName: e.target.value });\n  };\n\n  handleEnterPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\") {\n      this.submitEvent();\n    }\n  };\n\n  handleDeleteEventsClick = () => {\n    this.props.deleteEvents();\n  };\n\n  handleMarkEventsReadClick = () => {\n    this.props.markEventsRead();\n  };\n\n  render() {\n    return (\n      <div className={styles.wrapper}>\n        <div className={styles.row}>\n          <div>\n            <input\n              className={styles.textbox}\n              aria-label=\"Set increment amount\"\n              value={this.state.eventName}\n              onChange={this.handleInputChange}\n              onKeyPress={this.handleEnterPress}\n              placeholder=\"Введите название события..\"\n            />\n            <button\n              className={`${styles.button} ${styles.button__small}`}\n              onClick={this.submitEvent}\n            >\n              Отправить\n            </button>\n          </div>\n\n          <button\n            className={styles.button}\n            onClick={this.handleMarkEventsReadClick}\n          >\n            Пометить все события прочитанными\n          </button>\n          <button\n            className={styles.button}\n            onClick={this.handleDeleteEventsClick}\n          >\n            Удалить все события\n          </button>\n          <button\n            className={styles.button}\n            onClick={this.handleTogglePopoverClick}\n          >\n            Скрыть/показать попап нотификаций\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const Controls = connector(ControlsComponent);\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","export const MINUTE = 60000;\nexport const HOUR = 3600000;\nexport const DAY = 86400000;\nexport const MONTH = 2629800000;\nexport const YEAR = 31557600000;\n\nexport function timeMessage(\n  fromTimestampMillis: number,\n  currentTimestampMillis: number\n) {\n  let differenceMillis = currentTimestampMillis - fromTimestampMillis;\n\n  switch (true) {\n    case differenceMillis < MINUTE:\n      return \"несколько секунд назад\";\n\n    case differenceMillis > MINUTE && differenceMillis < MINUTE * 2:\n      return `1 минуту назад`;\n    case differenceMillis >= MINUTE * 2 && differenceMillis < MINUTE * 5:\n      return `${Math.floor(differenceMillis / MINUTE)} минуты назад`;\n    case differenceMillis >= MINUTE * 5 && differenceMillis < HOUR:\n      return `${Math.floor(differenceMillis / MINUTE)} минут назад`;\n\n    case differenceMillis > HOUR && differenceMillis < HOUR * 2:\n      return `1 час назад`;\n    case differenceMillis >= HOUR * 2 && differenceMillis < HOUR * 5:\n      return `${Math.floor(differenceMillis / HOUR)} часа назад`;\n    case differenceMillis >= HOUR * 5 && differenceMillis < DAY:\n      return `${Math.floor(differenceMillis / HOUR)} часов назад`;\n\n    case differenceMillis > DAY && differenceMillis < DAY * 2:\n      return `1 день назад`;\n    case differenceMillis >= DAY * 2 && differenceMillis < DAY * 5:\n      return `${Math.floor(differenceMillis / DAY)} дня назад`;\n    case differenceMillis >= DAY * 5 && differenceMillis < MONTH:\n      return `${Math.floor(differenceMillis / DAY)} дней назад`;\n\n    case differenceMillis >= MONTH && differenceMillis < MONTH * 2:\n      return `1 месяц назад`;\n    case differenceMillis >= MONTH * 2 && differenceMillis < MONTH * 5:\n      return `${Math.floor(differenceMillis / MONTH)} месяца назад`;\n    case differenceMillis >= MONTH * 5 && differenceMillis < YEAR:\n      return `${Math.floor(differenceMillis / MONTH)} месяцев назад`;\n  }\n}\n","import React from \"react\";\n\nimport { useAppSelector, useAppDispatch } from \"../../../app/hooks\";\nimport { selectEvents, selectReadCount, togglePopover } from \"../slice\";\n\nimport styles from \"./Bell.module.css\";\n\nexport function Bell() {\n  const events = useAppSelector(selectEvents);\n  const read = useAppSelector(selectReadCount);\n  const unreadCount = events.length - read;\n  const dispatch = useAppDispatch();\n\n  function toggleModal() {\n    dispatch(togglePopover());\n  }\n\n  return (\n    <div className={styles.wrapper} onClick={toggleModal}>\n      <img src=\"bell.png\" alt=\"\" className={styles.icon} />\n      {unreadCount !== 0 && <div className={styles.number}>{unreadCount}</div>}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useAppSelector, useAppDispatch } from \"../../app/hooks\";\nimport { selectEvents, showPopoverOpen, togglePopover } from \"./slice\";\nimport styles from \"./Notifications.module.css\";\nimport { timeMessage } from \"../events/lib/timeMessage\";\nimport { Bell } from \"./lib/Bell\";\n\nexport type NotificationsProps = {\n  popoverEventsCount: number;\n};\n\nexport function Notifications({ popoverEventsCount }: NotificationsProps) {\n  const events = useAppSelector(selectEvents);\n  const showModal = useAppSelector(showPopoverOpen);\n  const dispatch = useAppDispatch();\n\n  function handleExpandClick() {\n    dispatch(togglePopover());\n  }\n\n  return (\n    <div>\n      <Bell />\n      {showModal && !!events.length && (\n        <div className={styles.row}>\n          {events.slice(0, popoverEventsCount).map((evt, i) => (\n            <div key={`${evt.name}_${i}`} className={styles.item}>\n              <div className={styles.name}>{evt.name}</div>\n              <div className={styles.time}>\n                {timeMessage(evt.timestamp, new Date().getMilliseconds())}\n              </div>\n            </div>\n          ))}\n          {events.length > popoverEventsCount && (\n            <button className={styles.link} onClick={handleExpandClick}>\n              посмотреть все...\n            </button>\n          )}\n        </div>\n      )}\n      {events.length === 0 && showModal && (\n        <div className={styles.row}>Нет событий</div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Controls } from \"./features/events/Controls\";\nimport { Notifications } from \"./features/events/Notifications\";\nimport \"./App.css\";\n\nconst AUTO_EVENT_INTERVAL_MILLIS = 2000;\nconst POPOVER_EVENTS_COUNT = 5;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Notifications popoverEventsCount={POPOVER_EVENTS_COUNT} />\n      </header>\n      <Controls autoEventIntervalMills={AUTO_EVENT_INTERVAL_MILLIS} />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\nimport eventsReducer from \"../features/events/slice\";\n\nexport const store = configureStore({\n  reducer: {\n    events: eventsReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./app/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}